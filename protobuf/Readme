C++ProtoBuf的安装与使用

安装(Ubuntu 16.04)
sudo apt-get install autoconf automake libtool curl make g++ unzip
git clone https://github.com/google/protobuf.git
cd protobuf
git submodule update --init --recursive
./autogen.sh
./configure
make
make check
sudo make install
sudo ldconfig # refresh shared library cache
protoc --version


测试：
(1)创建pbtest.proto文件，输入如下代码段
syntax = "proto3";

enum Messagetype
{
	REQUEST_RESPONSE_NONE = 0;            
	REQUEST_HEARTBEAT_SIGNAL = 1;          
	RESPONSE_HEARTBEAT_RESULT = 2;      
}

message MsgResult
{
	bool result =1;  
	bytes error_code = 2; 
}

message TopMessage
{
	Messagetype message_type = 1; 		//message type
	MsgResult msg_result = 2;
}

syntax 指定protobuf的版本,必须是文件的第一行
message 代表这是一个消息,TopMessage消息中指定了2个字段,每一个字段对应于要包含在这种类型的消息中的数据,每一个字段都有一个名称和类型

enum 代表枚举

等号后面的不是默认值,可以认为是该字段的身份证,不可重复,这些数字用于以二进制格式标识您的字段,一旦消息类型被使用就不应该被更改

注意: 需要注意的是1到15范围内的字段编号需要一个字节来编码,而16到2047范围内的字段编号需要两个字节,所以经常使用的应该为其编码为1到15之间,这些数字的范围是[1, 536870911],其中19000～19999是为协议缓冲区实现而保留的,不可以使用,否则报错


(2)先编译pbtest.proto文件生成.cc和.h文件，命令如下：
格式：protoc proto文件路径 --cpp_out=C++代码文件导出目录
protoc pbtest.proto --cpp_out=./ //先编译proto文件生成.cc和.h文件

注：若对proto文件进行修改，则需要重新使用protoc进行编译，生成新的cc和h文件。

(3)创建main.cpp文件
#include "pbtest.pb.h"		//解析出来的.h文件
#include "stdio.h"

void sendHeart();
void receHeart(TopMessage* topMessage);
void receHeartResp(TopMessage* topMessage);

/*
** ===================================================================
**     Method      :  sendHeart 
**
**     Description :  数据写入
** 
** ===================================================================
*/
void sendHeart()
{
	
	TopMessage message;
	message.set_message_type(REQUEST_HEARTBEAT_SIGNAL);
	printf("sendHeart %d\n",message.message_type());
	receHeart(&message);
}

/*
** ===================================================================
**     Method      :  receHeart 
**
**     Description :  数据读取然后写入
** 
** ===================================================================
*/
void receHeart(TopMessage* topMessage)
{

	if (topMessage->message_type() == REQUEST_HEARTBEAT_SIGNAL)
	{
		
		printf("request_heartbeat_signal\n");
		TopMessage topMessageResp;

		MsgResult mesResult;
		mesResult.set_result(true);
	
		mesResult.set_error_code("error");
		
		topMessageResp.set_message_type(RESPONSE_HEARTBEAT_RESULT);
		
		*topMessageResp.mutable_msg_result() = mesResult;

		receHeartResp(&topMessageResp);
	}
	
}

/*
** ===================================================================
**     Method      :  receHeartResp 
**
**     Description :  数据读取
** 
** ===================================================================
*/
void receHeartResp(TopMessage* topMessage)
{

	if (topMessage->message_type() == RESPONSE_HEARTBEAT_RESULT)
	{
		printf("response_heartbeat_result\n");
		
		printf("%s\n",topMessage->msg_result().error_code().c_str());

	}
}

int main()
{
	sendHeart();
	google::protobuf::ShutdownProtobufLibrary();
	return 0;
}

先进行数据写入，然后数据读取，根据读取到的数据，进行数据写入，最后再读取验证。

整个Demo很简单，包含了数据的读取和写入基本操作

详细的读取和写入方式还请自行查找相关文档或访问官网，我这里由于官网需要翻墙无法访问，
且c++水平有限，仅通过解码后的.cc 和 .h进行推测


(4)编译：命令如下
g++ -std=c++11 pbtest.pb.cc main.cpp -o test `pkg-config --cflags --libs protobuf`
不加``中的内容编译报错

pbtest.pb.cc为解析出来的.cc源文件
main.cpp为编写Demo的源文件
-std=c++11 需要ISO C++ 2011 standard 支持，必须加，否则会报下列错误，编译无法通过

/usr/include/c++/4.8/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options.

(5)执行
执行生成的test文件
./test

sendHeart 1
request_heartbeat_signal
response_heartbeat_result
error













